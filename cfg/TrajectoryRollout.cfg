#!/usr/bin/env python
PACKAGE = "robomagellan"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("samples_x", int_t, 0, "Number of samples in forward velocity", 25, 1, 100)
gen.add("samples_th", int_t, 0, "Number of samples in angular velocity", 25, 1, 100)
gen.add("sim_time", double_t, 0, "Time to forward simulate trajectory (seconds)", 2.0, 0.1, 10.0)
gen.add("sim_resolution", double_t, 0, "Timestep when simulating (seconds)", 0.1, 0.01, 1.0)

gen.add("min_vel_x", double_t, 0, "Minimum velocity to sample in forward velocity (m/s)", 0.25, 0.0, 10.0)
gen.add("max_vel_x", double_t, 0, "Maximum velocity to sample in forward velocity (m/s)", 1.0, 0.0, 10.0)
gen.add("min_vel_th", double_t, 0, "Minimum velocity to sample in angular velocity FOR IN PLACE ROTATIONS (m/s)", 0.5, 0.0, 10.0)
gen.add("max_vel_th", double_t, 0, "Maximum velocity to sample in angular velocity (m/s)", 2.0, 0.0, 10.0)
gen.add("acc_lim_x", double_t, 0, "Maximum acceleration in forward velocity (m/s^2)", 0.5, 0.0, 10.0)
gen.add("acc_lim_th", double_t, 0, "Maximum acceleration in angular velocity (m/s^2)", 1.0, 0.0, 10.0)

gen.add("goal_scale", double_t, 0, "Scale to apply to goal_distance (which is meters)", 1.0, 0.0, 10.0)
gen.add("path_scale", double_t, 0, "Scale to apply to path_distance (which is meters)", 1.0, 0.0, 10.0)
gen.add("obstacle_scale", double_t, 0, "Scale to apply to obstacle cost (unitless)", 1.0, 0.0, 10.0)
gen.add("velocity_scale", double_t, 0, "Scale to apply to forward velocity cost (s^2/m^2)", 1.0, 0.0, 10.0)

gen.add("goal_tolerance_x", double_t, 0, "Tolerance in x direction", 0.1, 0.001, 1.0)
gen.add("goal_tolerance_y", double_t, 0, "Tolerance in y direction", 0.1, 0.001, 1.0)

exit(gen.generate(PACKAGE, "waypoint_nav", "TrajectoryRollout"))
